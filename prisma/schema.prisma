datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  publicKey     String    @unique
  walletAddress String    @unique
  gender        Gender?
  ipAddress     String?
  avatarUrl     String?
  interests     String[]
  isPro         Boolean   @default(false)
  proEnd        DateTime?
  isBanned      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  initiatedCalls     Call[]             @relation("initiator_calls")
  receivedCalls      Call[]             @relation("receiver_calls")
  sentTexts          Text[]             @relation("sender_texts")
  receivedTexts      Text[]             @relation("receiver_texts")
  userFriendships    Friendship[]       @relation("user_friends")
  friendFriendships  Friendship[]       @relation("friend_user")
  reportsMade        Report[]           @relation("reporter")
  reportsReceived    Report[]           @relation("reported_user")
  leaderboardEntries LeaderboardEntry[]
  subscriptions      Subscription[]
  rooms1             Room[]             @relation("user1_rooms")
  rooms2             Room[]             @relation("user2_rooms")
  pointActivity      PointActivity[]
  ratings            Rating[]           @relation("user_ratings")
  ratedRatings       Rating[]           @relation("rated_user_ratings")
}

model Rating {
  id          String   @id @default(uuid())
  userId      String
  ratedUserId String
  rating      Int
  createdAt   DateTime @default(now())

  // Relations
  user      User @relation("user_ratings", fields: [userId], references: [id])
  ratedUser User @relation("rated_user_ratings", fields: [ratedUserId], references: [id])
}

model Call {
  id               String   @id @default(uuid())
  initiatorId      String
  receiverId       String
  durationSec      Int
  startedAt        DateTime
  endedAt          DateTime
  ratedByInitiator Int?
  ratedByReceiver  Int?

  // Relations
  initiator User? @relation("initiator_calls", fields: [initiatorId], references: [id])
  receiver  User? @relation("receiver_calls", fields: [receiverId], references: [id])
}

model Text {
  id String @id @default(uuid())

  senderId   String?
  receiverId String?

  senderAnonId   String
  receiverAnonId String

  content String
  sentAt  DateTime @default(now())
  roomId  String

  // Relations
  sender   User? @relation("sender_texts", fields: [senderId], references: [id])
  receiver User? @relation("receiver_texts", fields: [receiverId], references: [id])
  room     Room  @relation(fields: [roomId], references: [id])
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  // Relations
  user   User @relation("user_friends", fields: [userId], references: [id])
  friend User @relation("friend_user", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Report {
  id             String   @id @default(uuid())
  reporterId     String
  reportedUserId String
  reason         String
  createdAt      DateTime @default(now())

  // Relations
  reporter     User @relation("reporter", fields: [reporterId], references: [id])
  reportedUser User @relation("reported_user", fields: [reportedUserId], references: [id])
}

model LeaderboardEntry {
  id       String   @id @default(uuid())
  userId   String
  date     DateTime
  score    Float
  eligible Boolean  @default(true)

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  plan      Plan
  startedAt DateTime @default(now())
  expiresAt DateTime

  // Relations
  user User @relation(fields: [userId], references: [id])
}

model Room {
  id          String   @id @default(uuid())
  type        RoomType
  user1Id     String? // references User
  anonUser1Id String? // fallback for anonymous user
  user2Id     String?
  anonUser2Id String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Text[]

  // Relations
  user1 User? @relation("user1_rooms", fields: [user1Id], references: [id])
  user2 User? @relation("user2_rooms", fields: [user2Id], references: [id])

  @@index([user1Id])
  @@index([user2Id])
  @@index([anonUser1Id])
  @@index([anonUser2Id])
}

model PointActivity {
  id        String   @id @default(uuid())
  userId    String
  point     Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

enum Plan {
  MONTHLY
  YEARLY
}

enum Gender {
  MALE
  FEMALE
}

enum RoomType {
  CHAT
  CALL
  VIDEO_CALL
}
